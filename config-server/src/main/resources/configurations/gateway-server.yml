server:
  port: 8080

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8081/realms/cloud-project/protocol/openid-connect/certs
      client:
        registration:
          my-oauth2-client:
            provider: keycloak
            client-id: cloud-project
            client-secret: 9gOcNAvWOV4RT74IAknjw29zkP0VvYXO
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
            scope: openid, message.read
        provider:
          keycloak:
            issuer-uri: http://localhost:8081/realms/cloud-project
            authorization-uri: http://localhost:8081/realms/cloud-project/protocol/openid-connect/auth
            token-uri: http://localhost:8081/realms/cloud-project/protocol/openid-connect/token

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: usuarios
          uri: 'lb://MICROSERVICIO-USUARIOS'
          predicates:
            - Path=/api/v1/usuarios/**
        - id: proveedores
          uri: 'lb://MICROSERVICIO-PROVEEDORES'
          predicates:
            - Path=/api/v1/proveedores/**
      default-filters:
        - TokenRelay=
    
springdoc:
  swagger-ui:
    path: /swagger-ui

eureka:
  client:
    # To report to Eureka when this service is up
    registerWithEureka: true
    # Eureka server URL
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
  instance:
    # To avoid using DNS
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${random.uuid}

  # Actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  info:
    env:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true